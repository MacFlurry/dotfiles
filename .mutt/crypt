# =======
#  crypt
# =======

unset crypt_use_gpgme	# [no] use gpgme for S/MIME and PGP insted of classic
set crypt_autopgp		# [yes] automatically enable PGP
set crypt_autosmime		# [yes] automatically enable SMIME
unset crypt_autosign	# [no] always sign outgoing messages
unset crypt_autoencrypt	# [no] always encrypt outgoing messages
set crypt_replysign		# [no] automatically sign replies to msgs which are sgn.
set crypt_replysignencrypted # [no] automatically sign replies to enc. msgs
set crypt_timestamp		# [yes] include a time stamp surrounding PGP output
set crypt_verify_sig	# [yes] always attempt to verify PGP or S/MIME sigs

# ---------
#  PGP/GPG
# ---------

# [pgp_entry_format] PGP key selection menu
# %n 	number
# %k	key id
# %u 	user id
# %a	algorithm
# %l 	key length
# %f 	flags
# %c 	capabilities
# %t 	trust/validity of the key-uid association
# %[<s>]	date of the key where <s> is an strftime(3) expression
set pgp_entry_format="%4n %t%f %4l/0x%k %-4a %2c %u"

unset pgp_use_gpg_agent # [no] use a possibly-running gpg-agent process
set pgp_ignore_subkeys	# [yes] ignore OpenPGP subkeys, inherit instead
set pgp_replyencrypt 	# [yes] automatically encrypt replies to encrypted mail
# [""] only consider a PGP sig verified if it matches
set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"
set pgp_check_exit		# [yes] check the exit code of the PGP subprocess
unset pgp_long_ids		# [no] use 64 bit PGP key IDs instead of 32 bit
unset pgp_retainable_sigs # [no] nested multipart/{signed,encrypted} body parts
unset pgp_autoinline	# [no] old-style inline messages
unset pgp_replyinline	# [no] always attempt to create an inline message
set pgp_show_unusable	# [yes] display non-usable keys on key selection menu
set pgp_sign_as="0x37F34C16" # [""] if you have more than one key pair
set pgp_strict_enc		# [yes] automatically encode signed msgs as quoted-print
set pgp_timeout=300		# [300] secs after which a cached passphrase will expire
set pgp_sort_keys=address # how the entries in `pgp keys' menu are sorted
set pgp_mime_auto=ask-yes # [ask-yes] automatically send msg when inline fails
unset pgp_auto_decode	# [no] automatically decrypt 

# %p      Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty
#         string otherwise. Note: This may be used with a %? construct.
# %f      Expands to the name of a file containing a message.
# %s      Expands to the name of a file containing the signature part
#                    of a multipart/signed attachment when verifying it.
# %a      The value of $pgp_sign_as.
# %r      One or more key IDs.

#set pgp_getkeys_command
set pgp_getkeys_command="/usr/bin/gpg --recv-keys %r 2> /dev/null"

# decode application/pgp
set pgp_decode_command="/usr/bin/gpg %?p?--passphrase-fd 0? --no-verbose --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="/usr/bin/gpg --no-verbose --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="/usr/bin/gpg --passphrase-fd 0 --no-verbose --batch --output - %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="/usr/bin/gpg-2comp --no-verbose --batch  --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a?  %f"
set pgp_clearsign_command="/usr/bin/gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="/usr/bin/gpg-2comp --no-verbose --batch --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="/usr/bin/gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command=""pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_only_command="pgpewrap /usr/bin/gpg -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp --passphrase-fd 0 -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg --passphrase-fd 0 -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="/usr/bin/gpg --no-verbose --import -v %f"

# export a key from the public key ring
set pgp_export_command="/usr/bin/gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="/usr/bin/gpg --no-verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="/usr/bin/gpg --no-verbose --batch --with-colons --list-keys %r"=20

# read in the secret key ring
set pgp_list_secring_command="/usr/bin/gpg --no-verbose --batch --with-colons --list-secret-keys %r"=20


# --------
#  S/MIME
# --------

set smime_sign_as="a9eef47c.0"

set smime_timeout=300	# [300] secs after which a cached passphrase expires
unset smime_is_default	# [no] use PGP on all auto-sign/encryption operations
set smime_ask_cert_label # [yes] you'll be asked to enter a label for a cert
set smime_decrypt_use_default_key # [yes] use default key for decryption
set smime_keys="~/.mutt/smime/keys"
set smime_certificates="~/.mutt/smime/certs"
#set smime_import_cert_command
#set smime_default_key
set smime_ca_location="~/.mutt/smime/ca-bundle.crt"

# Algorithm to use for encryption.
# valid choices are rc2-40, rc2-64, rc2-128, des, des3
set smime_encrypt_with="des3"

# Encrypt a message. Input file is a MIME entity.
set smime_encrypt_command="openssl smime -encrypt -%a -outform DER -in %f %c"

# Decrypt a message. Output is a MIME entity.
set smime_decrypt_command="openssl smime -decrypt  -passin stdin -inform DER -in %f -inkey %k -recip %c"

# Verify a signature of type multipart/signed
set smime_verify_command="openssl smime -verify -inform DER -in %s -CAfile ~/.mutt/smime/ca-bundle.crt -content %f"

# Verify a signature of type application/x-pkcs7-mime
set smime_verify_opaque_command="openssl smime -verify -inform DER -in %s -CAfile ~/.mutt/smime/ca-bundle.crt"

# Sign.
set smime_sign_command="openssl smime -sign -signer %c -inkey %k -passin stdin -in %f -certfile %i -outform DER"

#set smime_sign_opaque_command
#TODO

# These are used to extract a certificate from a message.
# First generate a PKCS#7 structure from the message.
set smime_pk7out_command="openssl smime -verify -in %f -noverify -pk7out"

# Extract the included certificate(s) from a PKCS#7 structure.
set smime_get_cert_command="openssl pkcs7 -print_certs -in %f"

# Extract the signer's certificate only from a S/MIME signature (sender
# verification)
set smime_get_signer_cert_command="openssl smime -verify -in %f -noverify -signer %c -out /dev/null"

# This is used to get the email address the certificate was issued to.
set smime_get_cert_email_command="openssl x509 -in  %f -noout -email"


# -----
#  SSL
# -----

#set entropy_file
#set certificate_file
#set ssl_ca_certificates_file
#set ssl_client_cert

#set ssl_force_tls		# [no] require encryption for all connections to servers
#set ssl_starttls=yes	# [yes] use STARTTLS on servers with the capability
#set ssl_usesystemcerts	# [yes] use CA certs in the system cert store
#set ssl_use_sslv2		# [yes] use SSLv2 in the SSL authentication process
#set ssl_use_sslv3		# [yes] use SSLv3 in the SSL authentication process
#set ssl_use_tlsv1		# [yes] use TLSv1 in the SSL authentication process
#set ssl_min_dh_prime_bits=0 # [0] minimum acceptable primze size in DH

# vim: ft=muttrc
