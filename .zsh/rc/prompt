##
##  Prompt
## 

# TODO.
#function left_prompt
#{
#    local c_user=$fg_bold[cyan]
#    local c_at=$fg[green]
#    local c_host=$fg_bold[cyan]
#    local c_indicator=$fg_bold[blue]
#
#    local c_path=$fg[cyan]
#    
##    if [[ -z "$SSH_CONNECTION" ]] ; then
##        c_at="%{$fg_bold[$2]%}"
##        c_indicator=="%{$fg_bold[yellow]%}"
##    fi
#
#    local user_and_host="%(!.$fg_bold[red]%m.$c_user%n$c_at@$c_host%m)"
#    local indicator="$c_indicator%#"
#
#    export PROMPT="$user_and_host $indicator $reset_color"
#}
#
#function right_prompt
#{
#    local status_code="%(?..$fg[red]%U%?%u)"
#    local cwd="%(!.$fg_bold[red].$fg_bold[cyan])"
#
#    # FIXME: What's the right escaping mechanism to prevent '[' from being
#    # treated as subscript parameter? When found, replace with $fg[blue][.
#    local bb=$'%{\e[1;34m%}'
#
#    export RPROMPT="$status_code $bb[$cwd%35<..<%~$bb]$reset_color "
#}

function set_prompt()
{ 
    local none=$'%{\e[0m%}'

    local black=$'%{\e[0;30m%}'
    local red=$'%{\e[0;31m%}'
    local green=$'%{\e[0;32m%}'
    local yellow=$'%{\e[0;33m%}'
    local blue=$'%{\e[0;34m%}'
    local purple=$'%{\e[0;35m%}'
    local cyan=$'%{\e[0;36m%}'
    local white=$'%{\e[0;37m%}'

    local blackB=$'%{\e[1;30m%}'
    local redB=$'%{\e[1;31m%}'
    local greenB=$'%{\e[1;32m%}'
    local yellowB=$'%{\e[1;33m%}'
    local blueB=$'%{\e[1;34m%}'
    local purpleB=$'%{\e[1;35m%}'
    local cyanB=$'%{\e[1;36m%}'
    local whiteB=$'%{\e[1;37m%}'

    local col1=${cyanB}   # user@host
    local col2=${blueB}   # % 
    local col3=${col1}    # [/path/to/foo]


    # Prompt
    if [[ -z "$SSH_CONNECTION" ]] ; then
        # Local prompt
        export PROMPT="%(!.${redB}%m.${col1}%n${greenB}@${col1}%m) ${col2}%# ${none}" 
    else
        # Remote prompt
        export PROMPT="%(!.${redB}%m ${yellow}+.${col1}%n${redB}@${col1}%m) ${col2}%# ${none}" 
    fi

    # Right-side prompt
    export RPROMPT="%(?..${red}%U%?%u${none}) ${col2}[%(!.${redB}.${col3})%35<..<%~${col2}]${none}"

    # $PS2 (used in loops, statements, ...)
    export PS2="%(4_:... :)%3_ ${col2}>${none} "   

    # Correction prompt
    export SPROMPT="error: correct '%B%R%b' to '%B%r%b'? (%Un%uo|%Uy%ues|%Ua%ubort|%Ue%udit) " 
}

set_prompt

# vim:ft=zsh
