##
## Functions to modify the terminal title.
##

case $TERM in
    xterm*|rxvt*)
        title() 
        { 
            print -Pn "\e]0;${(fV)1}" 
            print -n "${(q)${ARGV[2,-1]}}\a"
        }
        ;;
    screen)
        title() 
        {
            print -nPR $'\033k'$1$'\033'\\
            print -nPR $'\033]0;'$2$'\a'
        }
        ;;
esac     

# Always show a static title (to rename screen windows).
static-title()
{
    unfunction precmd
    unfunction preexec
    title ${(q)*}
}

# Executed before each prompt.
precmd()
{
    # Reload SSH environment if in screen session.
    ssh-fix

    [[ $TERM == "linux" ]] && return

    title "%20<..<%3~%<<"
}

# Executed just after a command has been read and is about to be executed.
preexec() 
{
    [[ $TERM == "linux" ]] && return

    emulate -L zsh
    local -a cmd; cmd=(${(z)1})             # Re-parse the command line.

    # Construct a command that will output the desired job number.
    case $cmd[1] in
        fg)
            if (( $#cmd == 1 )); then
                # No arguments, must find the current job
                cmd=(builtin jobs -l %+)
            else
                # Replace the command name, ignore extra args.
                cmd=(builtin jobs -l ${(Q)cmd[2]})
            fi;;
        %*) 
            cmd=(builtin jobs -l ${(Q)cmd[1]});; # Same as "else" above
        exec) 
            shift cmd;&     # If the command is 'exec', drop that, because
                            # we'd rather just see the command that is being
                            # exec'd. Note the ;& to fall through.
        *)  
            title $cmd[1]:t "$cmd[2,-1]"    # Not resuming a job,
            return;;                        # so we're all done.
    esac

    local -A jt; jt=(${(kv)jobtexts})       # Copy jobtexts for subshell

    # Run the command, read its output, and look up the jobtext.
    # Could parse $rest here, but $jobtexts (via $jt) is easier.
    $cmd >>(read num rest
    cmd=(${(z)${(e):-\$jt$num}})
    title $cmd[1]:t "$cmd[2,-1]") 2>/dev/null
}

# vim: ft=zsh
