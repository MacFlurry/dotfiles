#!/bin/sh
#
# This script prepares a productive environment for a user.

set -e

log() {
  yellow="\e[0;33m"
  magenta="\e[0;35m"
  red="\e[0;31m"
  reset="\e[0;0m"
  printf "$magenta>$red>$yellow>$reset %s\n" "$*" 1>&2
}

# MacOS-specific system changes.
adjust_macos_defaults() {
  # -- Updates ----------------------------------------------------------------
  # Enable Debug Menu in the Mac App Store
  defaults write com.apple.appstore ShowDebugMenu -bool true
  # Enable the automatic update check
  defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true
  # Check for software updates daily, not just once per week.
  defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
  # Download newly available updates in background.
  defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1
  # Install System data files & security updates.
  defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1
  # Automatically download apps purchased on other Macs.
  defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1
  # Turn on app auto-update.
  defaults write com.apple.commerce AutoUpdate -bool true
  # Allow the App Store to reboot machine on macOS updates.
  defaults write com.apple.commerce AutoUpdateRestartRequired -bool true
  # -- System -----------------------------------------------------------------
  # Disable the sound effects on boot.
  sudo nvram SystemAudioVolume=" "
  # Disable the over-the-top focus ring animation.
  defaults write NSGlobalDomain NSUseAnimatedFocusRing -bool false
  # Increase window resize speed for Cocoa applications.
  defaults write NSGlobalDomain NSWindowResizeTime -float 0.001
  # Expand save panel by default.
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
  # Expand print panel by default.
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true
  # Automatically quit printer app once the print jobs complete
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true
  # Save to disk (not to iCloud) by default.
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
  # Display ASCII control characters using caret notation in standard text
  # views. Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`.
  defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true
  # Reveal IP address, hostname, OS version, etc. when clicking the clock in
  # the login window.
  sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName
  # Restart automatically if the computer freezes.
  sudo systemsetup -setrestartfreeze on
  # Disable automatic capitalization.
  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false
  # Disable smart dashes.
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
  # Disable automatic period.
  defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
  # Disable smart quotes.
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
  # Disable auto-correct.
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
  # Show language menu in the top right corner of the boot screen.
  sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true
  # Disable shadow in screenshots.
  defaults write com.apple.screencapture disable-shadow -bool true
  # Don't automatically rearrange Spaces based on most recent use.
  defaults write com.apple.dock mru-spaces -bool false
  # Automatically hide and show the Dock.
  defaults write com.apple.dock autohide -bool true
  # Remove the auto-hiding Dock delay
  defaults write com.apple.dock autohide-delay -float 0
  # -- Keyboard ---------------------------------------------------------------
  # Set a really fast key repeat.
  defaults write NSGlobalDomain KeyRepeat -int 1
  defaults write NSGlobalDomain InitialKeyRepeat -int 15
  # Disable press-and-hold for keys in favor of key repeat.
  defaults write -g ApplePressAndHoldEnabled -bool false
  # -- Finder -----------------------------------------------------------------
  # Show the ~/Library folder.
  chflags nohidden ~/Library
  # Show certain volumes on Desktop.
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true
  # Always open in list view.
  defaults write com.apple.Finder FXPreferredViewStyle Nlsv
  # Always show the path bar.
  defaults write com.apple.finder ShowPathbar -bool true
  # Always show the status bar.
  defaults write com.apple.finder ShowStatusBar -bool true
  # Disable animations.
  defaults write com.apple.finder DisableAllAnimations -bool true
  # Show all file extensions.
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
  # Keep folders on top when sorting by name.
  defaults write com.apple.finder _FXSortFoldersFirst -bool true
  # When performing a search, search the current folder by default.
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
  # Disable warning when changing a file extension.
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
  # Avoid creating .DS_Store files on network or USB volumes.
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
  # Automatically open a new Finder window when a volume is mounted.
  defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
  defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
  defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true
  # Expand the following File Info panes:
  # "General", "Open with", and "Sharing & Permissions"
  defaults write com.apple.finder FXInfoPanesExpanded -dict \
    General -bool true \
    OpenWith -bool true \
    Privileges -bool true
  # -- Safari -----------------------------------------------------------------
  # Privacy: don’t send search queries to Apple.
  defaults write com.apple.Safari UniversalSearchEnabled -bool false
  defaults write com.apple.Safari SuppressSearchSuggestions -bool true
  # Warn about fraudulent websites.
  defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool true
  # Block pop-up windows.
  defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false
  # Enable Do Not Track.
  defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true
  # Update extensions automatically.
  defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true
  # Disable AutoFill.
  defaults write com.apple.Safari AutoFillFromAddressBook -bool false
  defaults write com.apple.Safari AutoFillPasswords -bool false
  defaults write com.apple.Safari AutoFillCreditCardData -bool false
  defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false
  # Show the full URL in the address bar (note: this still hides the scheme).
  defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true
  # Prevent Safari from opening ‘safe’ files automatically after downloading.
  defaults write com.apple.Safari AutoOpenSafeDownloads -bool false
  # Hide bookmark bar.
  defaults write com.apple.Safari ShowFavoritesBar -bool false
  # Set up for development.
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write com.apple.Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
  # Add a context menu item for showing the Web Inspector in web views.
  defaults write NSGlobalDomain WebKitDeveloperExtras -bool true
  # -- Tools ------------------------------------------------------------------
  # Use plain text mode for new TextEdit documents.
  defaults write com.apple.TextEdit RichText -int 0
  # Open and save files as UTF-8 in TextEdit.
  defaults write com.apple.TextEdit PlainTextEncoding -int 4
  defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4
  # Enable the debug menu in Disk Utility.
  defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true
  defaults write com.apple.DiskUtility advanced-image-options -bool true
  # Further inspiration for adjustment of defaults:
  # - https://github.com/holman/dotfiles/blob/master/macos/set-defaults.sh
  # - https://github.com/mathiasbynens/dotfiles/blob/master/.macos
}

# Configures the postfix MTA as a GMail relay.
#
# It's a good idea to send a test message to make sure the setup works as
# expected:
#
#    echo postfix test | mail -s test you@gmail.com 
#
# Since macOS Sierra, there are no more logfiles and debugging requires
# invoking this command instead:
#
#   sudo log stream --predicate '(process == "smtpd") || (process == "smtp")'
#
# If you have a message in the `mailq` that doesn't find its way out, try to
# force a flush via `sendmail -q` while watching the log stream output.
setup_postfix_as_gmail_relay() {
  # Configure SASL authentication.
  if ! sudo test -f /etc/postfix/sasl/sasl_passwd; then
    log "enter your Gmail address:"
    IFS= read -r email
    log "enter your Gmail password:"
    IFS= read -rs password
    if ! sudo test -d /etc/postfix/sasl; then
      sudo mkdir -m 600 /etc/postfix/sasl
    else
      sudo chmod -R 600 /etc/postfix/sasl
    fi
    sasl_passwd="[smtp.gmail.com]:587 $email:$password"
    echo "$sasl_passwd" | sudo tee /etc/postfix/sasl/sasl_passwd > /dev/null
    sudo chown root:wheel /etc/postfix/sasl/sasl_passwd
    sudo chmod 600 /etc/postfix/sasl/sasl_passwd
    sudo postmap /etc/postfix/sasl/sasl_passwd
    sudo postmap /etc/postfix/generic
  fi
  # Configure main.cf.
  if ! fgrep -q 'smtp.gmail.com' /etc/postfix/main.cf; then
    set +e
    read -d '' main_cf_gmail << EOT
# -------------------
# Gmail configuration
# -------------------

# Google refuses email from IPv6 addresses without reverse name.
inet_protocols = ipv4

# Set Gmail SMTP relay.
relayhost = [smtp.gmail.com]:587

# Enable SASL authentication in the Postfix SMTP client.
smtpd_sasl_auth_enable = yes
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl/sasl_passwd
smtp_sasl_security_options = noanonymous
smtp_sasl_mechanism_filter = AUTH LOGIN

# Use Homebrew's openssl certificates.
smtp_tls_CApath = /usr/local/etc/openssl/certs
smtp_tls_CAfile = /usr/local/etc/openssl/cert.pem

# Enable TLS.
smtp_use_tls = yes
smtp_tls_security_level = encrypt
EOT
    read -d '' main_cf_header << EOT
# -------------------
# Basic configuration
# -------------------
EOT
    set -e
    skip="inet_protocols|use_sacl_cache|mydomain_fallback"
    skip="${skip}|imap_submit_cred_file"
    main_cf_base=$(awk '$1 !~ /^#|^$/' /etc/postfix/main.cf | egrep -v "$skip")
    main_cf="$main_cf_header\n\n$main_cf_base\n\n$main_cf_gmail"
    sudo cp /etc/postfix/main.cf /etc/postfix/main.cf.orig
    echo "$main_cf" | sudo tee /etc/postfix/main.cf > /dev/null
    if sudo postfix status 2> /dev/null; then
      sudo postfix stop 2> /dev/null
    fi
    sudo postfix start
  fi
}

# Ask for the administrator password once at the beginning and keep it alive.
log "please enter your password to proceed"
sudo -v
while true; do
  sudo -n true
  sleep 60
  kill -0 "$$" || exit
done 2>/dev/null &

# Perform OS-specific adjustments.
case "$(uname -s)" in
  Darwin)
    # Close any open System Preferences panes, to prevent them from overriding
    # settings we’re about to change.
    osascript -e 'tell application "System Preferences" to quit'
    log "adjusting macOS defaults"
    adjust_macos_defaults
    log "performing software update"
    sudo softwareupdate -i -a > /dev/null 2>&1
    log "installing XCode comand line developer tools"
    xcode-select --install > /dev/null 2>&1 || true
    homebrew="Homebrew/install/master/install"
    ;;
  Linux)
    homebrew="Linuxbrew/install/master/install"
    exit 1
    ;;
  *)
    log "$OS not yet supported"
    exit 1
    ;;
esac

if which brew > /dev/null 2>&1; then
  log "upgrading existing Homebrew packages"
  brew upgrade
else
  log "installing Homebrew"
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/$homebrew)"
fi

log "installing bundled Homebrew packages"
cd "$(dirname "$0")"
brew bundle || true
brew cleanup
cd -

log "setting Zsh as login shell"
zsh=$(which zsh)
if ! fgrep -q "$zsh" /etc/shells; then
  log "adding $zsh to /etc/shells"
  echo "$zsh" | sudo tee -a /etc/shells > /dev/null
fi
sudo chsh -s "$zsh" $USER

log "installig Vim plugins"
vim +PlugInstall +qall

if [ ! -d ~/.tmux/plugins/tpm ]; then
  log "installig Tmux plugins"
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  ~/.tmux/plugins/tpm/bin/install_plugins
fi

if ! fgrep -q stmp.gmail.com /etc/postfix/main.cf; then
  log "configuring postfix as Gmail relay"
  setup_postfix_as_gmail_relay
fi

log "done"
