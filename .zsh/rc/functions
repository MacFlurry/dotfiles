## 
##  Functions
##

function kernel()
{
	printf 'GET /kdist/finger_banner HTTP1.0\n\n' | nc www.kernel.org 80 \
	| grep latest
}

function http_header()
{
	# This is zsh but still no gnu echoism ;P
	if [[ $2 != "" ]] { port=$2 } else { port=80 }
	if [[ $3 != "" ]] { vhost="$3" } else { vhost=$1 }

	printf "HEAD /$4 HTTP/1.1\\nHost: $vhost\nConnection: close\n\n" \
	| nc $1 $port
}     

# search for todos from here on
function todo() 
{
	grep -ir TODO *
} 

# display current directory as a 'tree'.
if [[ ! -x  $(which tree 2> /dev/null) ]]; then
	function tree() 
	{ 
		find . | sed -e 's/[^\/]*\//|----/g' -e 's/---- |/    |/g' | less
	}
fi 

# checks whether a PCRE matches a value. 
# synopsis: % regcheck '\^.{3} EUR' '500 EUR'
function regcheck() 
{
	if [[ -n $(zmodload -i zsh/pcre) ]]; then
		if [[ -z $2 ]]; then
			pcre_compile $1 
			pcre_match $2 && echo "regex matches" || echo "regex does not match"
		else
			echo "usage: $0 <regex> <match-string>"
		fi
	fi
}

# synopsis: findpids [prog]	(slightly adapted keychain version)
function findpids() {
	me=$(whoami) || return 1
    unset fp_psout

    # Different systems require different invocations of ps.  Try to generalize
    # the best we can.  The only requirement is that the agent command name
    # appears in the line, and the PID is the first item on the line.
    [ -n "$OSTYPE" ] || return 1

    # Try systems where we know what to do first
    case "$OSTYPE" in
        AIX|*bsd*|*BSD*|CYGWIN|darwin*|Linux|OSF1)
			fp_psout=`ps x 2>/dev/null` ;;      # BSD syntax
        HP-UX)
            fp_psout=`ps -u $me 2>/dev/null` ;; # SysV syntax
        SunOS)
            case `uname -r` in
                [56]*)
                    fp_psout=`ps -u $me 2>/dev/null` ;; # SysV syntax
                *)
                    fp_psout=`ps x 2>/dev/null` ;;      # BSD syntax
            esac ;;
    esac

    # If we didn't get a match above, try a list of possibilities...
    # The first one will probably fail on systems supporting only BSD syntax.
    if [ -z "$fp_psout" ]; then
        fp_psout=`UNIX95=1 ps -u $me -o pid,comm 2>/dev/null | grep '^ *[0-9]'`
        [ -z "$fp_psout" ] && fp_psout=`ps x 2>/dev/null`
    fi

    # Return the list of pids; ignore case for Cygwin.
    # Check only 8 characters since Solaris truncates at that length.
    # Ignore defunct ssh-agents (bug 28599)
    if [ -n "$fp_psout" ]; then
        echo "$fp_psout" | \
		awk "BEGIN{IGNORECASE=1} /defunct/{next} /$1/{print \$1}" | xargs
        return 0
    fi

	# If none worked, we're stuck
	error "Unable to use \"ps\" to scan for $1 processes"
	return 1
}

# display colors
function _cols()
{
        esc="\033["
        print "\t 40\t 41\t 42\t 43\t 44\t 45\t 46\t 47"
        for fore in 30 31 32 33 34 35 36 37; do
                line1="$fore  "
                line2="    "
                for back in 40 41 42 43 44 45 46 47; do
                        line1="${line1}${esc}${back};${fore}m Normal  ${esc}0m"
                        line2="${line2}${esc}${back};${fore};1m Bold    ${esc}0m"
                done
                print "$line1\n$line2"
        done
}

# thirsty ?
function beer()
{
	print "         _.._..,_,_"        
	print "        (          )"
	print "         ]~,\"-.-~~["        
	print "       .=])' (;  ([    Prost!"
	print "       | ]:: '    ["
	print "       '=]): .)  (["
	print "         |:: '    |"
	print "          ~~----~~"
}

# Remote screen - saves SSH environment variables before running screen.
function rscreen()
{
    prefix="${HOME}/.screen"
    file="ssh-session-vars"

    if [[ -n "${SSH_CLIENT}" ]] ; then
        mkdir -m 700 -p ${prefix}

        # Variables to save
        ssh_vars=(SSH_CLIENT SSH_TTY SSH_AUTH_SOCK SSH_CONNECTION DISPLAY)

        for x in ${ssh_vars} ; do
            (eval echo $x=\$$x) | sed  's/=/="/
            s/$/"/
            s/^/export /'
        done 1> "${prefix}/${file}"
    fi

    screen ${@}
}

# Restores SSH environment variables to reinstate SSH agent-forwarding.
function fixssh()
{
    prefix="${HOME}/.screen"
    file="ssh-session-vars"
    fullpath="${prefix}/${file}"

    [[ -f ${fullpath} ]] && source ${fullpath}
}


#
# SPECIAL FUNCTIONS - have a special meaning to the shell
#

# executed whenever the current working directory is changed
#chpwd() 
#{
#	[[ -t 1 ]] || return	# we don't want to print in the middle of a script
#}

# active command as title in terminals
case $TERM in
	xterm*|rxvt*)
		function title() 
		{ 
			print -nP '\e]0;'$*'\a'
		}
		;;
	screen)
		function title() 
		{
			print -nPR $'\033k'$1$'\033'\\
			print -nPR $'\033]0;'$2$'\a'
		}
		;;
	*) 
		function title() {}
		;;
esac     

# executed before each prompt
precmd()
{
	title "zsh:%20<..<%3~%<<"	# current dir in title
}

# executed just after a command has been read and is about to be executed
preexec() 
{
	emulate -L zsh
    local -a cmd; cmd=(${(z)1})

	title $cmd[1]:t "$cmd[2,-1]"
	#title %n@%m$cmd[1]:t "$cmd[2,-1]"
}

# vim: ft=zsh
