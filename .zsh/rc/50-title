##
## Functions to modify the terminal title.
##

# TODO: modularize aspects into separate functions and push each into the
# corresponding execution array, e.g., preexec_functions.

! is-at-least 4.3.7 && return

case $TERM in
  xterm*|rxvt*)
    title() 
    { 
      print -Pn "\e]0;${(fV)1}" 
      print -n "${(q)${ARGV[2,-1]}}\a"
    }
    ;;
  screen*)
    title() 
    {
      print -nPR $'\033k'$1$'\033'\\
      print -nPR $'\033]0;'$2$'\a'
    }
    ;;
esac     

# Always show a static title (to rename screen/tmux windows).
static-title()
{
  unfunction precmd
  unfunction preexec
  title ${(q)*}
}

# Executed before each prompt.
precmd()
{
  if ! whence title &> /dev/null; then
    return
  fi

  # Reload SSH environment if in screen/tmux session.
  [[ $TERM =~ screen.* ]] && ssh-fix

  title "%20<..<%3~%<<"
}

# Executed just after a command has been read and is about to be executed.
preexec() 
{
  if ! whence title &> /dev/null; then
    return
  fi

  emulate -L zsh
  local -a cmd; cmd=(${(z)1})             # Re-parse the command line.

  # Construct a command that will output the desired job number.
  case $cmd[1] in
    fg)
      if (( $#cmd == 1 )); then
        # No arguments, must find the current job
        cmd=(builtin jobs -l %+)
      else
        # Replace the command name, ignore extra args.
        cmd=(builtin jobs -l ${(Q)cmd[2]})
      fi;;
    %*) 
      cmd=(builtin jobs -l ${(Q)cmd[1]});; # Same as "else" above
    exec) 
      shift cmd;&     # If the command is 'exec', drop that, because
      # we'd rather just see the command that is being
      # exec'd. Note the ;& to fall through.
    *)  
      title $cmd[1]:t "$cmd[2,-1]"    # Not resuming a job,
      return;;                        # so we're all done.
  esac

  local -A jt; jt=(${(kv)jobtexts})       # Copy jobtexts for subshell

  # Run the command, read its output, and look up the jobtext.
  # Could parse $rest here, but $jobtexts (via $jt) is easier.
  $cmd >>(read num rest
  cmd=(${(z)${(e):-\$jt$num}})
  title $cmd[1]:t "$cmd[2,-1]") 2>/dev/null
}

# vim: ft=zsh
