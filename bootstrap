#!/bin/sh
#
# This script prepares a productive environment for a user.

set -e

usage() {
  printf "usage: %s [aspect...] \n" $(basename $0)
  echo
  echo "aspects"
  echo
  echo "    defaults     adjust system defaults for productivity"
  echo "    keyboard     symlink custom keyboard to system"
  echo "    homebrew     setup Homebrew and install bundled packages"
  echo "    dotfiles     setup dotfiles and install plugins"
  echo "    postfix      setup postfix as GMail relay"
  echo "    tmux         install Tmux plugins"
  echo "    vim          install Vim plugins"
  echo "    fish          setup fish as login shell"
  echo
  echo "without any arguments, all aspects will be setup (in the above order)"
  echo
}

log() {
  yellow="\e[0;33m"
  magenta="\e[0;35m"
  red="\e[0;31m"
  reset="\e[0;0m"
  printf "$magenta>$red>$yellow>$reset %s\n" "$*" 1>&2
}

# Keeps sudo priviledge alive throughout the execution of this script.
enter_sudo_mode() {
  if ! sudo -n true 2> /dev/null; then
    log "please enter your password to maintain a sudo session"
    sudo -v
    while true; do
      sudo -n true
      sleep 60
      kill -0 "$$" || exit
    done 2>/dev/null &
  fi
}

# MacOS-specific system changes.
setup_macos() {
  enter_sudo_mode
  source bootstrap.macos
}

setup_keyboard_layout() {
  enter_sudo_mode
  sudo cp mavam.keylayout /Library/Keyboard\ Layouts/
  # Map Caps Lock to Left Alt key.
	# https://developer.apple.com/library/content/technotes/tn2450/_index.html
	hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000039,"HIDKeyboardModifierMappingDst":0x7000000E2}]}'
}

setup_homebrew() {
  if which brew > /dev/null 2>&1; then
    log "upgrading existing Homebrew packages"
    brew upgrade
  elif which ruby > /dev/null 2>&1; then
    log "installing Homebrew"
    case "$(uname -s)" in
      Darwin)
        homebrew="Homebrew/install/master/install"
        ;;
      Linux)
        homebrew="Linuxbrew/install/master/install"
        exit 1
        ;;
      *)
        log "$OS not yet supported"
        exit 1
        ;;
    esac
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/$homebrew)"
  else
    log "cannot install Homebrew (ruby not found)"
    exit 1
  fi
  log "installing bundled Homebrew packages"
  brew bundle "--file=$(dirname "$0")/homebrew/.Brewfile" || true
  brew cleanup
}

# Configures the postfix MTA as a GMail relay.
#
# The function asks to a test message to make sure the setup works as expected.
# This can be also done manually:
#
#    echo postfix test | mail -s test you@gmail.com
#
# Since macOS Sierra, there are no more logfiles and debugging requires
# invoking this command instead:
#
#   sudo log stream --predicate '(process == "smtpd") || (process == "smtp")'
#
# If you have a message in the `mailq` that doesn't find its way out, try to
# force a flush via `sendmail -q` while watching the log stream output.
setup_postfix() {
  enter_sudo_mode
  # Setup SASL authentication.
  log "enter your Gmail address:"
  IFS= read -r email
  log "enter your Gmail password:"
  IFS= read -rs password
  if ! sudo test -d /etc/postfix/sasl; then
    sudo mkdir -m 600 /etc/postfix/sasl
  else
    sudo chmod -R 600 /etc/postfix/sasl
  fi
  sasl_passwd="[smtp.gmail.com]:587 $email:$password"
  echo "$sasl_passwd" | sudo tee /etc/postfix/sasl/sasl_passwd > /dev/null
  sudo chown root:wheel /etc/postfix/sasl/sasl_passwd
  sudo chmod 600 /etc/postfix/sasl/sasl_passwd
  sudo postmap /etc/postfix/sasl/sasl_passwd
  sudo postmap /etc/postfix/generic
  # Setup SMTP relay.
  set +e
  read -d '' main_cf_gmail << EOT
# -------------------
# Gmail configuration
# -------------------

# Avoid startup failures.
compatibility_level = 2

# Google refuses email from IPv6 addresses without reverse name.
inet_protocols = ipv4

# Set Gmail SMTP relay.
relayhost = [smtp.gmail.com]:587

# Enable SASL authentication in the Postfix SMTP client.
smtpd_sasl_auth_enable = yes
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl/sasl_passwd
smtp_sasl_security_options = noanonymous
smtp_sasl_mechanism_filter = AUTH LOGIN

# Use Homebrew's openssl certificates.
smtp_tls_CApath = /usr/local/etc/openssl/certs
smtp_tls_CAfile = /usr/local/etc/openssl/cert.pem

# Enable TLS.
smtp_use_tls = yes
smtp_tls_security_level = encrypt
EOT
  read -d '' main_cf_header << EOT
# -------------------
# Basic configuration
# -------------------
EOT
  set -e
  skip="inet_protocols|use_sacl_cache|mydomain_fallback"
  skip="${skip}|imap_submit_cred_file"
  main_cf_base=$(awk '$1 !~ /^#|^$/' /etc/postfix/main.cf | egrep -v "$skip")
  main_cf="$main_cf_header\n\n$main_cf_base\n\n$main_cf_gmail"
  sudo cp /etc/postfix/main.cf /etc/postfix/main.cf.orig
  echo "$main_cf" | sudo tee /etc/postfix/main.cf > /dev/null
  # Restart postfix.
  if sudo postfix status 2> /dev/null; then
    sudo postfix stop 2> /dev/null
  fi
  sudo postfix start
  # Prompt for sending a test email.
  log "send test mail to $email? [Y/n]"
  IFS= read -rs -n 1 input
  if [ "$input" = $'\n' ] || [ "$input" = "y" ]; then
    echo Test | mail -s "Postfix Test @ $(hostname -s) - $(date)" $email
  fi
}

setup_tmux() {
  if [ ! -d ~/.tmux/plugins/tpm ]; then
    log "installing Tmux plugins"
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    ~/.tmux/plugins/tpm/bin/install_plugins
  else
    log "updating Tmux plugins"
    ~/.tmux/plugins/tpm/bin/update_plugins all
  fi
}

setup_vim() {
  log "installing Vim plugins"
  if [ ! -e "$HOME/.vim/autoload/plug.vim" ]; then
    curl -fLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  else
    vim -E -s +PlugUpgrade +qa
  fi
  vim +PlugUpdate +PlugCLean! +qa
  log "installing vim-anywhere"
  curl -fsSL https://raw.github.com/cknadler/vim-anywhere/master/install | bash
}

setup_fish() {
  log "setting fish as login shell"
  fish=$(which fish 2> /dev/null)
  if ! fgrep -q "$fish" /etc/shells; then
    log "adding $fish to /etc/shells"
    echo "$fish" | sudo tee -a /etc/shells > /dev/null
  fi
  sudo chsh -s "$fish" $USER
}

main() {
  command=$1
  if [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$command" = "help" ]; then
    usage
    exit 0
  fi
  if [ "$command" = "defaults" ] || [ -z "$command" ]; then
    case "$(uname -s)" in
      Darwin)
        # Close any open System Preferences panes, to prevent them from
        # overriding settings weâ€™re about to change.
        osascript -e 'tell application "System Preferences" to quit'
        log "adjusting macOS defaults"
        setup_macos
        #log "performing software update"
        #sudo softwareupdate -i -a > /dev/null 2>&1
        #log "installing XCode comand line developer tools"
        #xcode-select --install > /dev/null 2>&1 || true
        ;;
      *)
        log "$OS not yet supported"
        exit 1
        ;;
    esac
  fi
  if [ "$command" = "keyboard" ] || [ -z "$command" ]; then
    case "$(uname -s)" in
      Darwin)
        log "installing custom keyboard layout"
        setup_keyboard_layout
        ;;
      *)
        log "$OS not yet supported"
        exit 1
        ;;
    esac
  fi
  if [ "$command" = "homebrew" ] || [ -z "$command" ]; then
    setup_homebrew
  fi
  if [ "$command" = "dotfiles" ] || [ -z "$command" ]; then
    sh "$(dirname "$0")/dots" install -a
  fi
  if [ "$command" = "postfix" ] || [ -z "$command" ]; then
    if ! fgrep -q stmp.gmail.com /etc/postfix/main.cf; then
      log "configuring postfix as Gmail relay"
      setup_postfix
    else
      log "postfix already as Gmail relay configured"
    fi
  fi
  if [ "$command" = "tmux" ] || [ -z "$command" ]; then
    setup_tmux
  fi
  if [ "$command" = "vim" ] || [ -z "$command" ]; then
    setup_vim
  fi
  if [ "$command" = "fish" ] || [ -z "$command" ]; then
    setup_fish
  fi
}

main "$@"
